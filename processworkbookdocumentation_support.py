""" support functions for GUI to process tableau workbooks for metadata"""
#! /usr/bin/env python
#
# Support module generated by PAGE version 4.8.9
# In conjunction with Tcl version 8.6
#    Apr 10, 2017 01:27:02 PM
#    Apr 14, 2017 04:19:25 PM

import os
from tkinter import filedialog
from tkinter import messagebox
from tkinter import StringVar
from tkinter import BooleanVar
import logging
import glob
import support_functions
from WorkbookDocumentation import workbook_documentation


def set_tk_var():
    """set overall variable used in GUI"""
    # These are Tk variables used passed to Tkinter and must be
    # defined before the widgets using them are created.
    global inEntryTxt
    inEntryTxt = StringVar()

    global styleguideEntryTxt
    styleguideEntryTxt = StringVar()

    global outEntryTxt
    outEntryTxt = StringVar()

    global file_or_dir
    file_or_dir = StringVar()
    file_or_dir.set("File")

    global auto_start
    auto_start = BooleanVar()

    global suppress_error_dialogs
    suppress_error_dialogs = BooleanVar()


def exit_window():
    """Remove main window"""
    destroy_window()


def in_browse():
    """Browse files to find input file or directory"""
    global inEntryTxt
    global file_or_dir
    global top_level

    old_foc = top_level.focus_get()

    opts = {}
    if os.name != "posix":
        opts["filetypes"] = [
            ("Tableau workbooks and data sources", "*.twb;*.twbx;*.tds;*.tdsx"),
            ("all files", ".*"),
        ]
    if file_or_dir.get() == "File":
        inEntryTxt.set(filedialog.askopenfilename(**opts))
    elif file_or_dir.get() == "Directory":
        inEntryTxt.set(filedialog.askdirectory())
    else:
        messagebox.showinfo("Error", "Please select an option of File or Directory")

    if old_foc:
        old_foc.focus_set()


def styleguide_browse():
    """Browse files to find styleguid json"""
    global styleguideEntryTxt
    global top_level

    old_foc = top_level.focus_get()

    opts = {}
    if os.name != "posix":
        opts["filetypes"] = [("JSON files", "*.json"), ("all files", ".*")]
    styleguideEntryTxt.set(filedialog.askopenfilename(**opts))

    if old_foc:
        old_foc.focus_set()


def out_browse():
    """Browse directories to set output location"""
    global outEntryTxt
    global top_level

    old_foc = top_level.focus_get()
    outEntryTxt.set(filedialog.askdirectory())
    if old_foc:
        old_foc.focus_set()


def open_config(inconfig=None):
    """Open configuration file to set parameters"""
    global top_level
    global process_cfg

    old_foc = top_level.focus_get()
    support_functions.open_config("process_cfg", process_cfg, inconfig)
    if old_foc:
        old_foc.focus_set()


def save_config():
    """Save parameters into configuration file"""
    global top_level
    global process_cfg

    old_foc = top_level.focus_get()
    support_functions.save_config("process_cfg", process_cfg)
    if old_foc:
        old_foc.focus_set()


def process_files():
    """Process file(s) from defined input"""
    global inEntryTxt
    global styleguideEntryTxt
    global outEntryTxt
    global file_or_dir
    global top_level
    global w
    global suppress_error_dialogs

    old_foc = top_level.focus_get()

    input_file_dir = support_functions.validate_infile(inEntryTxt.get(), file_or_dir)
    style_file = StringVar()
    style_file.set("File")
    style_guide_string = styleguideEntryTxt.get()
    if style_guide_string != "":
        style_guide_file = support_functions.validate_infile(
            style_guide_string, style_file
        )
    else:
        style_guide_file = None
    output_dir = support_functions.validate_file_or_dir(
        outEntryTxt.get(), "Output directory", "directory"
    )
    step = 0
    error_count = 0
    error_files = ""
    if input_file_dir and output_dir:
        if file_or_dir.get() == "Directory":
            os.chdir(input_file_dir)
            logging.info("input_file_dir = %s", input_file_dir)
            w.add_progbar(0, len(glob.glob("*.t[dw][bs]*")), 4)

            for infile_name in glob.glob("*.t[dw][bs]*"):
                try:
                    logging.info("infile name = %s", infile_name)
                    workbook_documentation(infile_name, output_dir, style_guide_file)
                except:
                    logging.error("error processing %s", infile_name)
                    error_files = error_files + chr(13) + chr(10) + infile_name
                    if suppress_error_dialogs.get() is not True:
                        if error_count < 3:
                            messagebox.showerror(
                                "File error",
                                f"Error encountered while processing {infile_name}",
                            )
                            error_count += 1
                        else:
                            if messagebox.askokcancel(
                                "File errors",
                                f"Multiple errors encountered. Latest: {infile_name}. "
                                + "OK to continue, Cancel to quit",
                            ):
                                error_count = 0
                            else:
                                exit(1)
                step += 1
                w.update_progbar(step, f"Now processing: {infile_name}")
            w.update_progbar(step, "Finished processing")
        elif file_or_dir.get() == "File":
            logging.info("infile name = %s", input_file_dir)
            workbook_documentation(input_file_dir, output_dir, style_guide_file)

        print(error_files)
        logging.info(
            "Finished Workbook Documentation creation using processworkbookdocumentation.py"
        )
        if len(error_files) > 0:
            error_files = f"{chr(13) + chr(10)}{chr(13) + chr(10)}Found errors with the following files: {error_files}"
        messagebox.showinfo("Finished", f"Finished Workbook Documentation{error_files}")
    else:
        logging.info("Error with input or output file")
        messagebox.showerror(
            "Unable to start", "Error with input content or output destination"
        )
    if old_foc:
        old_foc.focus_set()


def init(top, gui):
    """Start the main window"""
    global w, top_level, root, process_cfg
    global inEntryTxt
    global file_or_dir
    global styleguideEntryTxt
    global outEntryTxt

    w = gui
    top_level = top
    root = top
    process_cfg = [
        support_functions.ConfigEntry("input_file_dir", inEntryTxt),
        support_functions.ConfigEntry("style_guide_file", styleguideEntryTxt),
        support_functions.ConfigEntry("save_dir", outEntryTxt),
        support_functions.ConfigEntry("file_or_dir", file_or_dir),
    ]

    logging.basicConfig(
        filename="process_workbook_documentation.log",
        level=logging.INFO,
        format="%(asctime)s %(message)s",
    )
    logging.info("Started")


def destroy_window():
    """Function which closes the window."""
    global top_level
    top_level.destroy()
    top_level = None


if __name__ == "__main__":
    import processworkbookdocumentation

    processworkbookdocumentation.vp_start_gui()
